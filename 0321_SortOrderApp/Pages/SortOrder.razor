@page "/sortorder2"
@inject IJSRuntime JS

<PageTitle>順番決め</PageTitle>

<h2>順番決め（一人ずつ表示）</h2>

<label style="display:block;">名前入力欄</label>
<div id="InputArea">
    <textarea @bind="inputText" disabled=@displayResult maxlength="50" placeholder="改行区切りで入力(最大50文字)"></textarea>
    <div id="buttonGroup">
        <button @onclick="SaveInput" title="テキストをブラウザに保存します">
            保存
        </button>
        <button @onclick="DeleteInput" title="保存したテキストを削除します">
            削除
        </button>
    </div>    
</div>
<button type="button" class="btn btn-primary" @onclick="OnSetClicked" >@startButtonText</button>
<hr />

@if (displayResult)
{
    <div style="text-align:center;" >
        <div>
            <button disabled=@(!(0 < orderNumber)) type="button" class="btn btn-primary" style="width: 100px; margin:10px; " @onclick="OnBackClicked">戻る</button>
            <button disabled=@(!(orderNumber < namesCount-1)) type="button" class="btn btn-primary" style="width: 100px; margin:10px;" @onclick="OnNextClicked">進む</button>
        </div>

        <div style="font-size: 50pt;">@orderedList[orderNumber]</div> 
        <p>@($"{orderNumber+1} / {namesCount}")</p>

    </div>
}


@code {
    private string inputText = "";
    private bool displayResult = false;
    private List<string> orderedList = new List<string>();

    private int orderNumber = 0;
    private int namesCount;
    private string startButtonText = "スタート！";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var text = await JS.InvokeAsync<string>("window.localStorage.getItem", "inputText");
            if (text != null)
            {
                inputText = text;
            }
            StateHasChanged();
        }
    }

    private void OnSetClicked()
    {
        if (displayResult)
        {
            displayResult = false;
            startButtonText = "スタート！";
            orderNumber = 0;
        }
        else
        {
            var nameList = inputText.Split(Environment.NewLine).ToList();

            //空要素を削除
            nameList.RemoveAll(string.IsNullOrEmpty);

            if(nameList.Count == 0)
            {
                return;
            }

            if (inputText.Length > 50)
            {
                inputText = inputText.Substring(0, 50);
            }

            orderedList = nameList.OrderBy(i => Guid.NewGuid()).ToList();
            namesCount = nameList.Count;

            startButtonText = "終了";
            displayResult = true;
        }
    }

    private void OnBackClicked()
    {
        if(0 < orderNumber)
        {
            orderNumber--;
        }
    }

    private void OnNextClicked()
    {
        if(orderNumber < namesCount-1)
        {
            orderNumber++;
        }
    }

    private async Task SaveInput()
    {
        await JS.InvokeVoidAsync("window.localStorage.setItem", "inputText", inputText);
    }

    private async Task DeleteInput()
    {
        await JS.InvokeVoidAsync("window.localStorage.removeItem", "inputText");
    }
}
